<?xml version="1.0"?>
<document>
  <properties>
    <title>JWeather - API Design</title>
    <author email="kellerds@users.sourceforge.net">Dennis Keller</author>
  </properties>
  <body>
    <section name="JWeather Design">
      <subsection name="Introduction">
        <p>
          This document describes the JWeather project's design. It is intended to be a living record and should be updated as new features are added to the library.
        </p>
        <p>
          The general philosophy behind the JWeather API is to provide a separation of parsing logic and data access objects. Organizing the code in this manner allows for both easy maintenance and easy access to data. The code is broken down into the following packages:
        </p>
        <p>
          <ul>
            <li>General: <a href="#general">net.sf.jweather</a></li>
            <li>Metar: <a href="#metar">net.sf.jweather.metar</a></li>
          <li>Testing: <a href="#test">net.sf.jweather.tests</a></li>
          </ul>
        </p>
        <p>
          Each of the above packages is discussed in the sections below.
        </p>
      </subsection>
    </section>
    <a name="general"/>
    <section name="General Package (net.sf.jweather)">
      <p>
        The root package contains driver classes that provide an invocation point for the library. In this package you will find command-line interfaces to the library. These allow for single-run invocations and are a good way to get comfortable with the features of the library.
      </p>
      <p>
        For more information on the command-line interface, see the appropriate document as specified on the left-hand navigation bar.
      </p>
    </section>
    <a name="metar"/>
    <section name="Metar Package (net.sf.jweather.metar)">
      <p>
        The metar package is responsible for handling NOAA Metar weather reports. The package consists of three parsing-related classes:
      </p>
      <p>
        <ul>
          <li><code>MetarParser</code></li>
	  <li><code>MetarParseException</code></li>
	  <li><code>MetarConstants</code></li>
        </ul>
      </p>
      <p>
        All other classes in the package are data access objects (DAOs)that are instantiated by the <code>MetarParser</code> as necessary for a given metar report. These classes consist of the following:
      </p>
      <p>
        <ul>
          <li><code>Metar</code></li>
          <li><code>Obscuration</code></li>
          <li><code>RunwayVisualRange</code></li>
          <li><code>SkyCondition</code></li>
          <li><code>WeatherCondition</code></li>
        </ul>
      </p>
      <p>
        The 'Metar' class is the root object that is returned by the parser. This root element contains the basic report information. These are data points such as temperature and dewpoint. More complex metar reports require use of the other classes above. The condition of use is fairly obvious given the class names. For more information on using the DAOs, please visit the project's JavaDoc.
      </p>
      <subsection name="MetarParser API">
        <p>
          The Metar parsing logic is contained in the <code>MetarParser</code> class. This class consists of several class variables and five class methods. The methods are all related to parsing actions and are static and thread safe.
        </p>
        <p>
          The <code>MetarParser</code> API deserves some further discussion as there are several potential use cases that you need to understand. Lets take a look at a few potential use cases that we've identified. If you have other cases that you'd like to have supported, please bring them to our attention: 
        </p>
        <p>
          <table>
            <tr>
              <th>#</th>
              <th>Description</th>
              <th>Method(s) Used</th>
            </tr>
            <tr>
              <td>1</td>
              <td>
              Parse entire two-line Metar report as retrieved from NOAA weather file:<br/>
              Sample Data:<br/>
              <code>
              2003/10/29 02:45
              KUVA 290245Z AUTO 14003KT 7SM CLR 14/06 A2984 RMK AO2
            </code><br/>
            In this case, we're taking the raw data from NOAA and parsing it. This include the report date stamp and the actual metar report. This is comaptible with the 0.2.X and earlier JWeather releases. It is also used when the user invokes the net.sf.jweather.Weather interface.
              </td>
              <td>parseRecord(String) or parse(String)[Deprecated]</td>
            </tr>
            <tr>
              <td>2</td>
              <td>
                Parse a single Metar record without the date string header. This is used when you do not have access to the date string header provided on the line above a Metar report. The string argument would look like:
                <code>
                  KUVA 290245Z AUTO 14003KT 7SM CLR 14/06 A2984 RMK AO2
                </code><br/>
                This is typically used by applications that have a Metar string that was parsed out of a feed file without the date header being preserved. <br/><br/>
                Note that the date provided in the resulting Metar object is created using the algorithm:<br/>
                <ol>
                  <li>The day and time will be retrieved from the DDHHMMZ string.  </li>
                  <li>If the dayOfMonth is greater than the current dayOfMonth<br/>
                    - We'll assume the report was from last month and roll back to last month. If this involves rolling the year, we'll also do that.</li>
                  <li>Otherwise Year and Month will be current.</li>
                </ol>
                <br/>
                NOTE: If you later provide a date string to the Metar using setDate(), then that value will overwrite the value parsed here.
                
                <br/><br/>Many applications will have the header date availalbe as a string and should fall into use case 2.
              </td>
              <td>parseReport(String)</td>
            </tr>
            <tr>
              <td>3</td>
              <td>
                This use case is very similar to case #2 with the modification that the date header string may be passed in for parsing. This method uses the following algorithm for determining date:<br/><br/>
                The date passed in the 'dateString' arg will be used to determine the year and month of this report. The day and time will be retreived from the the actual report string. 
              </td>
              <td>parseReport(String, String)</td>
            </tr>
          </table>
        </p>
        <p>
          Regardless of the API method used, the result will be a <code>Metar</code> data access object. This object will contain the extracted Metar report data and can be manipulated post-process. Please see the Javadocs for more information.
        </p>
      </subsection>
    </section>
    <a name="test"/>
    <section name="Test Package (net.sf.jweather.tests)">
	    <p>
		    TODO
      </p>
      <subsection name="">
        <p>
        </p>
      </subsection>
    </section>
  </body>
</document>

